// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "chat.proto" (package "chat", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { OpenAIService } from "./chat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ChatResponse } from "./chat";
import type { ChatRequest } from "./chat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service chat.OpenAIService
 */
export interface IOpenAIServiceClient {
    /**
     * @generated from protobuf rpc: StreamChat(chat.ChatRequest) returns (stream chat.ChatResponse);
     */
    streamChat(input: ChatRequest, options?: RpcOptions): ServerStreamingCall<ChatRequest, ChatResponse>;
}
/**
 * @generated from protobuf service chat.OpenAIService
 */
export class OpenAIServiceClient implements IOpenAIServiceClient, ServiceInfo {
    typeName = OpenAIService.typeName;
    methods = OpenAIService.methods;
    options = OpenAIService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamChat(chat.ChatRequest) returns (stream chat.ChatResponse);
     */
    streamChat(input: ChatRequest, options?: RpcOptions): ServerStreamingCall<ChatRequest, ChatResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatRequest, ChatResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
